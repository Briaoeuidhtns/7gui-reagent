{"version":3,"sources":["gui/core.cljs"],"mappings":"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","names":["gui.core/counter","with-let16926","reagent.ratom/with-let-values","temp__5739__auto__","reagent.ratom/*ratom-context*","c__16460__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init16927","res__16461__auto__","cljs.core/deref","c","reagent.core.atom","cljs.core.swap_BANG_","cljs.core/inc","gui.core/str->number","n","cljs.core/empty?","js/NaN","js/Number","gui.core/temperature-converter","with-let16930","init16931","data","c->f","f->c","f","on-change","from","to","conv","e","val","num","cljs.core/not","js/Number.isNaN","cljs.core/reset!","cljs.core/assoc","input","p__16937","map__16938","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","map__16939","cljs.core.get","valid?","map__16942","celcius","fahrenheit","gui.core/Date->input","date","cljs.pprint.cl_format","gui.core/str->date","s","temp__5735__auto__","cljs.core/re-matches","cljs.core/rest","cljs.core.map","cljs.core/reverse","cljs.core/seq","cljs.core/vec","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","gui.core/input","p__16946","map__16947","seq16944","G__16945","cljs.core/first","cljs.core/next","self__4723__auto__","value","props","cljs.core/any?","with-let16949","init16950","reagent.core.merge_props","G__16951","cljs.core.dissoc","gui.core/flight-booker","with-let16952","init16953","now","js/Date","p__16954","map__16955","flight-type","start","end","and__4115__auto__","or__4126__auto__","cljs.core._EQ_","cljs.core/compare","on-select-change","t","reagent.core.rswap_BANG_","cljs.core.keyword","reagent.core/cursor","submit","_","map__16957","js/alert","map__16959","gui.util/input","cljs.core.not_EQ_","G__16961","gui.core/timer","with-let16962","init16963","destroy__16459__auto__","reagent.ratom/reactive?","resolution","state","interval","js/setInterval","reagent.core/rswap!","cljs.core/update","reagent.core.partial","cljs.core/+","reset-time!","duration","duration-id","gui.util.new_id","bar-id","map__16964","time","clamped-time","x__4214__auto__","y__4215__auto__","x__4217__auto__","y__4218__auto__","js/clearInterval","gui.core/app","gui.crud/crud","gui.core/init!","cljs.core/enable-console-print!","reagent.dom.render","js/document"],"sourcesContent":["(ns gui.core\n  (:refer-clojure :exclude [partial])\n  (:require\n   [reagent.core :as r :refer [rswap! partial]]\n   [reagent.dom :as rd]\n   [clojure.pprint :refer [cl-format]]\n   [gui.crud :refer [crud]]\n   [gui.util :as util]))\n\n(defn counter\n  []\n  (r/with-let [c (r/atom 0)]\n    [:div.card\n     [:input {:read-only true :value @c}]\n     [:button {:on-click #(swap! c inc)}\n      \"Count\"]]))\n\n(defn str->number [n] (if (empty? n) js/NaN (js/Number n)))\n\n(defn temperature-converter\n  []\n  (r/with-let [data (r/atom {:celcius {:val nil :valid? true}\n                             :fahrenheit {:val nil :valid? true}})\n               c->f (fn [c] (+ (* c (/ 9 5)) 32))\n               f->c (fn [f] (* (- f 32) (/ 5 9)))\n               on-change\n               (fn [from to conv]\n                 (fn [e]\n                   (let [val (.. e -target -value)\n                         num (str->number val)]\n                     (if-not (js/Number.isNaN num)\n                       (reset! data\n                               {from {:val val :valid? true}\n                                ;; Not specified in spec, but follows reference\n                                ;; impl\n                                to {:val (.toFixed (conv num)) :valid? true}})\n                       (swap! data assoc from {:val val :valid? false})))))\n\n               input (fn [{{:keys [val valid?]} :data :keys [from to conv]}]\n                       [:input {:value val\n                                :class (when-not valid?\n                                         \"invalid\")\n                                :on-change (on-change from\n                                             to\n                                             conv)}])]\n    (let [{:keys [celcius fahrenheit]} @data]\n      [:div.card\n       [:label\n        [input {:data celcius :from :celcius :to :fahrenheit :conv c->f}]\n        \" Celcius\"]\n       \" = \"\n       [:label\n        [input {:data fahrenheit :from :fahrenheit :to :celcius :conv f->c}]\n        \" Fahrenheit\"]])))\n\n(defn Date->input\n  [date]\n  (cl-format nil\n             \"~2,'0D.~2,'0D.~4,'0D\"\n             (.getDate date)\n             (inc (.getMonth date))\n             (.getFullYear date)))\n\n(defn str->date\n  \"Parse a string of the form `dd.mm.yyyy` to a vector of (year month day)\n\n  Returns nil if invalid. Only validates form, not that the parsed date exists.\"\n  [s]\n  (when-let [date (->> s\n                       (re-matches #\"(\\d{2})\\.(\\d{2})\\.(\\d{4})\")\n                       rest\n                       (map str->number)\n                       reverse\n                       seq)]\n    (vec date)))\n\n(defn input\n  [value & {:keys [valid?] :as props :or {valid? any?}}]\n  (r/with-let [on-change (fn [e] (reset! value (.. e -target -value)))]\n    [:input\n     (r/merge-props {:class (when-not (valid? @value) :invalid)\n                     :value @value\n                     :on-change on-change}\n                    (dissoc props :valid?))]))\n\n(defn flight-booker\n  []\n  (r/with-let\n    [now (Date->input (js/Date.))\n     data (r/atom {:flight-type :one-way :start now :end now})\n     valid? (fn [{:keys [flight-type start end]}]\n              (let [start (str->date start)\n                    end (str->date end)]\n                (and start\n                     (or (= flight-type :one-way)\n                         (and end (<= (compare start end) 0))))))\n     on-select-change (fn [e]\n                        (let [t (.. e -target -value)]\n                          (rswap! data assoc :flight-type (keyword t))))\n     start (r/cursor data [:start])\n     end (r/cursor data [:end])\n     submit\n     (fn [_]\n       (let [{:keys [start end flight-type]} @data]\n         (js/alert\n           (cl-format\n             nil\n             \"You have booked a ~:[one-way~;return~]~:* flight ~:[for ~a~;~:*from ~a to ~a~]\"\n             (when (= flight-type :return) end)\n             start))))]\n    (let [{:keys [flight-type]} @data]\n      [:div.card {:style {:grid-auto-flow \"row\"}}\n       [:select {:value flight-type :on-change on-select-change}\n        [:option {:value :one-way}\n         \"one-way flight\"]\n        [:option {:value :return}\n         \"return flight\"]]\n       [util/input start :valid? str->date]\n       [util/input end :valid? str->date :disabled (not= flight-type :return)]\n       [:button {:on-click submit :disabled (not (valid? @data))}\n        \"Book\"]])))\n\n(defn timer\n  []\n  (r/with-let [resolution 100\n               state (r/atom {:time 0 :duration 15000})\n               interval (js/setInterval rswap!\n                                        resolution\n                                        state\n                                        update\n                                        :time\n                                        (partial + resolution))\n               reset-time! (fn [_] (rswap! state assoc :time 0))\n               duration (r/cursor state [:duration])\n               duration-id (util/new-id \"duration\")\n               bar-id (util/new-id \"progress\")]\n    (let [{:keys [time]} @state\n          clamped-time (-> time\n                           (max 1)\n                           (min @duration))]\n      [:div.card\n       {:style\n          {:grid\n             \"\\\"bar-label bar\\\" \\\"none text\\\" \\\"input-label input\\\" \\\"reset reset\\\"\"}}\n       [:label {:for bar-id :style {:grid-area \"bar-label\"}}\n        \"Elapsed Time:\"]\n       [:progress {:style {:grid-area \"bar\"}\n                   :id bar-id\n                   :max @duration\n                   :value clamped-time}]\n       [:span {:style {:grid-area \"text\"}}\n        (.toFixed (/ clamped-time 1000) 1)\n        \\s]\n       [:label {:for duration-id :style {:grid-area \"input-label\"}}\n        \"Duration:\"]\n       [util/input\n        duration\n        :type\n        \"range\"\n        :id\n        duration-id\n        :min\n        0\n        :max\n        30000\n        :step\n        100\n        :style\n        {:grid-area \"input\"}]\n       [:button {:on-click reset-time! :style {:grid-area \"reset\"}}\n        \"Reset Timer\"]])\n    (finally (js/clearInterval interval))))\n\n(defn app\n  []\n  [:<> [counter] [temperature-converter] [flight-booker] [timer] [crud]])\n\n(defn ^:export init!\n  []\n  (enable-console-print!)\n  (rd/render [app] (.getElementById js/document \"app\")))\n"]}