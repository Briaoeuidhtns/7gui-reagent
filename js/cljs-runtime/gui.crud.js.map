{"version":3,"sources":["gui/crud.cljs"],"mappings":"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","names":["var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","gui.crud/filter-list","p__16879","map__16880","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq16869","G__16870","cljs.core/first","cljs.core/next","G__16871","self__4723__auto__","value","selected","f","props","with-let16882","reagent.ratom/with-let-values","temp__5739__auto__","reagent.ratom/*ratom-context*","c__16460__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init16883","res__16461__auto__","default-props","e","val","cljs.core/reset!","cljs.core._EQ_","filtered","cljs.core/deref","cljs.core.into","cljs.core.filter","cljs.core.comp","cljs.core/val","reagent.core.merge_props","temp__5733__auto__","s","cljs.core.dissoc","iter__4529__auto__","s__16885","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__16887","cljs.core/chunk-buffer","i__16886","vec__16888","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__16884","cljs.core/chunk-rest","vec__16891","cljs.core/cons","cljs.core/rest","item","gui.crud/name-input","fullname","with-let16894","init16895","name-id","gui.util.new_id","surname-id","name","reagent.core/cursor","surname","gui.util/input","gui.crud/crud-button-bar","p__16897","map__16898","seq16896","self__4724__auto__","on-create","on-update","on-delete","has-selection?","cljs.core/not","gui.crud/filter-fn","prefix","clojure.string/starts-with?","gui.crud/fix-selection","state","map__16900","names","position","or__4126__auto__","and__4115__auto__","cljs.core.assoc","cljs.core/ffirst","reagent.core.partial","p__16902","map__16903","map__16904","gui.crud/create-name","cljs.core.update","cljs.core/assoc","cljs.pprint.cl_format","p__16907","map__16908","map__16909","gui.crud/update-name","cljs.core.ex_info","p__16912","map__16913","gui.crud/delete-name","cljs.core/dissoc","gui.crud/crud","with-let16916","init16917","reagent.core.atom","cljs.core/zipmap","cljs.core.repeatedly","names-state","name-state","position-state","filter-id","set-filter","p1__16915#","reagent.core/rswap!","map__16918","cljs.core/chunk-first"],"sourcesContent":["(ns gui.crud\n  (:refer-clojure :exclude [partial])\n  (:require\n   [reagent.core :as r :refer [rswap! partial]]\n   [reagent.ratom :as ra]\n   [gui.util :as util]\n   [clojure.pprint :refer [cl-format]]\n   [clojure.string :as str]))\n\n(defn filter-list\n  [value selected & {f :filter :as props}]\n  (r/with-let [default-props\n               {:on-change (fn [e]\n                             (let [val (.. e -target -value)]\n                               (reset! selected (when-not (= val \"\") val))))\n                ;; set multiple so selection can be empty\n                :multiple true}]\n    (let [filtered (into {} (filter (comp f val)) @value)]\n      [:select\n       (r/merge-props {:value (if-let [s @selected]\n                                [s]\n                                [])}\n                      default-props\n                      (dissoc props :filter))\n       (for [[val item] filtered]\n         ^{:key val}\n         [:option {:value val}\n          item])])))\n\n(defn name-input\n  [fullname]\n  (r/with-let [name-id (util/new-id \"name\")\n               surname-id (util/new-id \"surname\")\n               name (r/cursor fullname [:name])\n               surname (r/cursor fullname [:surname])]\n    [:div {:style {:display \"grid\"\n                   :grid \"\\\"name-label name\\\"\n\\\"surname-label surname\\\"\"\n                   :grid-area \"name\"}}\n     [:label {:for name-id :style {:grid-area \"name-label\"}}\n      \"Name: \"]\n     [util/input name :id name-id :style {:grid-area \"name\"}]\n     [:label {:for surname-id :style {:grid-area \"surname-label\"}}\n      \"Surname: \"]\n     [util/input surname :id surname-id :style {:grid-area \"surname\"}]]))\n\n(defn crud-button-bar\n  [& {:keys [on-create on-update on-delete has-selection?]}]\n  [:div {:style {:display \"grid\"\n                 :grid-area \"btnbar\"\n                 :grid-auto-flow \"column\"\n                 :justify-content \"start\"}}\n   [:button {:on-click #(on-create)}\n    \"Create\"]\n   [:button {:on-click #(on-update) :disabled (not has-selection?)}\n    \"Update\"]\n   [:button {:on-click #(on-delete) :disabled (not has-selection?)}\n    \"Delete\"]])\n\n(defn filter-fn [prefix val] (str/starts-with? val prefix))\n\n(defn fix-selection\n  \"Select something new if the current selection is invalid, i.e., filtered or deleted\"\n  [state]\n  (let [{:keys [names position prefix]} state\n        selected (get names position)]\n    ;; valid states:\n    ;;   - Position is nil\n    ;;   - Position is not nil, and still exists, and matches pred\n    (if (or (not position) (and selected (filter-fn prefix selected)))\n      ;; Selection still valid\n      state\n      ;; Adjust selection to first valid position\n      (assoc state\n        :position (ffirst (filter (comp (partial filter-fn prefix) val)\n                            names))))))\n\n(defn create-name\n  [{{:keys [name surname]} :input :as state}]\n  (update state\n          :names\n          assoc\n          (util/new-id \"name\")\n          (cl-format nil \"~a, ~a\" surname name)))\n\n(defn update-name\n  [{{:keys [name surname]} :input :keys [position] :as state}]\n  (if position\n    (update state :names assoc position (cl-format nil \"~a, ~a\" surname name))\n    (throw (ex-info \"Position is nil, can't update\" {:state state}))))\n\n(defn delete-name\n  [{:keys [position] :as state}]\n  (fix-selection (update state :names dissoc position)))\n\n(defn crud\n  []\n  (r/with-let [state (r/atom {:names (zipmap (repeatedly #(util/new-id \"name\"))\n                                             [\"Emil, Hans\"\n                                              \"Mustermann, Max\"\n                                              \"Tisch, Roman\"])\n                              :prefix \"\"\n                              :input {:name \"\" :surname \"\"}\n                              :position nil})\n               names-state (r/cursor state [:names])\n               name-state (r/cursor state [:input])\n               position-state (r/cursor state [:position])\n               filter-id (util/new-id \"filter\")\n               set-filter (fn [e]\n                            (rswap! state\n                                    #(fix-selection\n                                        (assoc %\n                                          :prefix (.. e -target -value)))))]\n    (let [{:keys [prefix position]} @state]\n      [:div.card\n       {:style {:grid\n                  \"\\\"filter none\\\"\n\\\"names name\\\"\n\\\"btnbar btnbar\\\"\n/ 1fr 1fr\"}}\n       [:label {:for filter-id :style {:grid-area \"filter\" :display \"flex\"}}\n        \"Filter prefix: \"\n        [:input {:on-change set-filter :value prefix :id filter-id}]]\n       [filter-list\n        names-state\n        position-state\n        :filter\n        (partial filter-fn prefix)\n        :size\n        3\n        :style\n        {:grid-area \"names\"}]\n       [name-input name-state]\n       [crud-button-bar\n        :has-selection?\n        position\n        :on-create\n        (partial rswap! state create-name)\n        :on-update\n        (partial rswap! state update-name)\n        :on-delete\n        (partial rswap! state delete-name)]])))\n"]}