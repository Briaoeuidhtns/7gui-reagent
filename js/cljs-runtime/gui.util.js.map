{"version":3,"sources":["gui/util.cljs"],"mappings":";AAKA,AAAA,AAAA,AAAAA,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD,AACHY;AADH,AAAA,AAAAV,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAC+BY;AAD/B,AAAAR,AAAAJ,AAAA,AACmBW,AAA8BE;AADjD,AAEE,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAC;AAAA,AAAA,AAAA,AAAAD,AAAA;AAAA;AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAF,AAAA,AAAAI;AAAA,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAAC,AAAA,AAAA,AAAA;;AAAA;;AAAA;;AAAA,AAAA,AAAAR,AAAA,AAAAI;;;;AAAA,AAAAK,AAAA,AAAA,AAAAT,AAAA;AAAA,AAAAS,AAAA,AAAAT,AAAA,AAAaW,AAAU,AAAKC;AAAL,AAAQ,AAACC,AAAOjB,AAAM,AAAA,AAAIgB;AAAjD,AAAAZ,AAAA;AAAA,AAAA,AAAAU,AAAA,AAAA,AAAA,AAEG,AAAA,AAAA,AAACK,AAAsB,AAAU,AAAAC,AAAA,AAAAF,AAASlB;AAAT,AAAA,AAAAoB,AAAAA,AAACnB,AAAAA,AAAAA;AAAlC,AAAA,AAAAiB,AAAA,AAAuB,AAAA,AAAA,AACClB,AACGe,AACZ,AAAA,AAACM,AAAOnB;AAL1B,AAAA;AAAAY;;;AAFF,AAAA,AAAA,AAAM1B;;AAAN;AAAA,AAAA,AAAA,AAAAO,AAAMP;AAAN,AAAA,AAAAQ,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AASA,AAAA,AAAA2B,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAmBC,AAAW,AAAA,AAACC;;AAC/B,AAAA;;;AAAA,AAAA5C,AAAM8C;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD;AAAN,AAEM,AAAA,AAACE;;;AAFP,AAAA,AAAA,AAAMF,AAGFG;AAHJ,AAGY,AAAKA,AAAO,AAACC,AAAMP,AAAWQ;;;AAH1C,AAAA,AAAA,AAAML;;AAAN","names":["var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","gui.util/input","p__16827","map__16828","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq16825","G__16826","cljs.core/first","cljs.core/next","self__4723__auto__","value","valid?","props","cljs.core/any?","with-let16830","reagent.ratom/with-let-values","temp__5739__auto__","reagent.ratom/*ratom-context*","c__16460__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init16831","res__16461__auto__","on-change","e","cljs.core/reset!","cljs.core/deref","reagent.core.merge_props","G__16832","cljs.core.dissoc","js/gui","js/gui.util","js/gui.util.unique-src","gui.util/unique-src","cljs.core.atom","G__16834","gui.util/new-id","js/Error","gui.util.new_id","prefix","cljs.core.swap_BANG_","cljs.core/inc"],"sourcesContent":["(ns gui.util\n  (:require\n   [reagent.core :as r]))\n\n\n(defn input\n  [value & {:keys [valid?] :as props :or {valid? any?}}]\n  (r/with-let [on-change (fn [e] (reset! value (.. e -target -value)))]\n    [:input\n     (r/merge-props {:class (when-not (valid? @value) :invalid)\n                     :value @value\n                     :on-change on-change}\n                    (dissoc props :valid?))]))\n\n(defonce ^:private unique-src (atom 0))\n(defn new-id\n  \"Create a new guaranteed unique id, with an optional descriptive prefix\"\n  ([] (new-id \"\"))\n  ([prefix] (str prefix (swap! unique-src inc))))\n"]}